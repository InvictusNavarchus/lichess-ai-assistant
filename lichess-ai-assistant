// ==UserScript==
// @name         Lichess AI Assistant
// @namespace    http://tampermonkey.net/
// @version      0.2.0
// @description  AI-powered assistant that explain stockfish's evaluation and suggestions in simple terms. 
// @author       Invictus Navarchus
// @match        https://lichess.org/analysis*
// @grant        GM_addStyle
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    // --- LOGGING HELPER ---
    /**
     * Generates a formatted prefix for console logging with timestamp and emoji.
     * @param {string} level - The log level (info, success, warning, error)
     * @param {string} action - The action being performed
     * @returns {string} Formatted prefix with timestamp and emoji
     */
    function getPrefix(level = 'info', action = '') {
        const now = new Date();
        const timestamp = now.toTimeString().slice(0, 8); // HH:mm:ss format
        
        const emojis = {
            info: 'ℹ️',
            success: '✅',
            warning: '⚠️',
            error: '❌',
            init: '🚀',
            ui: '🎨',
            chess: '♟️',
            api: '🌐',
            data: '📊',
            event: '🎯'
        };
        
        const emoji = emojis[level] || emojis.info;
        const actionText = action ? ` ${action}` : '';
        
        return `[${timestamp}] ${emoji}${actionText}:`;
    }

    // --- STYLES ---
    // Injects all the necessary CSS for the button and sidebar panel into the page.
    GM_addStyle(`
        :root {
            --ai-helper-blue: #007bff;
            --ai-helper-blue-dark: #0056b3;
            --ai-helper-gray: #f0f0f0;
            --ai-helper-white: #ffffff;
            --ai-helper-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .ai-helper-button {
            background: linear-gradient(145deg, var(--ai-helper-blue), var(--ai-helper-blue-dark));
            color: var(--ai-helper-white);
            border: none;
            padding: 0 15px;
            height: 36px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            margin-left: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
        }

        .ai-helper-button:hover {
            transform: translateY(-2px);
            box-shadow: var(--ai-helper-shadow);
        }

        .ai-helper-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
        }

        /* AI Coach sidebar panel - styled to match WikiBook */
        #ai-coach-field {
            margin-top: 1rem;
        }

        .ai-coach-content {
            padding: 15px;
            line-height: 1.6;
            font-size: 14px;
        }

        .ai-coach-content h3 {
            margin: 0 0 10px 0;
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }

        .ai-coach-content p {
            margin: 0 0 12px 0;
        }

        .ai-coach-content strong {
            font-weight: 600;
        }

        /* Loading Spinner */
        .ai-loader {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .ai-loader .spinner {
            width: 30px;
            height: 30px;
            border: 3px solid #f3f3f3;
            border-bottom-color: var(--ai-helper-blue);
            border-radius: 50%;
            animation: rotation 1s linear infinite;
        }

        @keyframes rotation {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .ai-error {
            color: #d32f2f;
            padding: 15px;
            font-size: 14px;
        }

        /* Ensure AI Coach panel stays visible even when marked as empty */
        #ai-coach-field.empty {
            display: block !important;
            visibility: visible !important;
        }

        #ai-coach-field.empty .ai-coach-content {
            display: block !important;
            visibility: visible !important;
        }
    `);

    // --- UI ELEMENTS ---
    let aiButton;
    let aiCoachPanel;
    let mutationObserver;

    /**
     * Sets up a MutationObserver to prevent the AI Coach panel from being hidden
     * when Lichess adds the 'empty' class due to WikiBook changes.
     */
    function setupMutationObserver() {
        console.log(getPrefix('event', 'Setting up MutationObserver for AI Coach panel'));
        
        const targetNode = document.querySelector('.analyse__side');
        if (!targetNode) {
            console.log(getPrefix('error', 'Could not find sidebar for MutationObserver'));
            return;
        }

        const config = { 
            childList: true, 
            subtree: true, 
            attributes: true, 
            attributeFilter: ['class'] 
        };

        mutationObserver = new MutationObserver((mutationsList) => {
            for (const mutation of mutationsList) {
                // Check if the AI Coach panel's classes were modified
                if (mutation.type === 'attributes' && 
                    mutation.attributeName === 'class' && 
                    mutation.target.id === 'ai-coach-field') {
                    
                    const aiCoachField = mutation.target;
                    const classes = aiCoachField.classList;
                    
                    // If the 'empty' class was added, remove it to keep the panel visible
                    if (classes.contains('empty')) {
                        console.log(getPrefix('event', 'Detected empty class added to AI Coach panel, removing it'));
                        classes.remove('empty');
                    }
                }
                
                // Also watch for the panel being removed and re-inject it if necessary
                if (mutation.type === 'childList') {
                    const aiCoachExists = document.getElementById('ai-coach-field');
                    if (!aiCoachExists && aiCoachPanel) {
                        console.log(getPrefix('event', 'AI Coach panel was removed, re-injecting'));
                        const sidebar = document.querySelector('.analyse__side');
                        if (sidebar) {
                            sidebar.appendChild(aiCoachPanel);
                            console.log(getPrefix('success', 'AI Coach panel re-injected successfully'));
                        }
                    }
                }
            }
        });

        mutationObserver.observe(targetNode, config);
        console.log(getPrefix('success', 'MutationObserver setup completed'));
    }

    /**
     * Creates and injects the "Ask AI" button and the AI Coach sidebar panel into the DOM.
     */
    function setupUI() {
        console.log(getPrefix('init', 'Setting up UI'));
        
        // Create the "Ask AI" button
        console.log(getPrefix('ui', 'Creating Ask AI button'));
        aiButton = document.createElement('button');
        aiButton.className = 'ai-helper-button';
        aiButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M6 12.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5M4.5 9.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5m2-3a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5m-2-3a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5"/>
                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
            </svg>
            <span>Ask AI for Help</span>
        `;
        aiButton.onclick = handleAskAI;

        // Create the AI Coach sidebar panel (similar to WikiBook)
        console.log(getPrefix('ui', 'Creating AI Coach panel'));
        aiCoachPanel = document.createElement('fieldset');
        aiCoachPanel.className = 'analyse__wiki toggle-box toggle-box--toggle toggle-box--ready';
        aiCoachPanel.id = 'ai-coach-field';
        aiCoachPanel.innerHTML = `
            <legend tabindex="0">AI Chess Coach</legend>
            <div class="ai-coach-content" id="ai-coach-content">
                <p>Click "Ask AI for Help" to get personalized analysis and guidance for your current position.</p>
            </div>
        `;

        // Append button to controls
        console.log(getPrefix('ui', 'Injecting button to controls container'));
        const controlsContainer = document.querySelector('.analyse__controls .features');
        if (controlsContainer) {
            controlsContainer.appendChild(aiButton);
            console.log(getPrefix('success', 'Ask AI button successfully injected'));
        } else {
            console.log(getPrefix('error', 'Could not find controls container to inject button'));
        }

        // Append AI Coach panel to sidebar (after WikiBook)
        console.log(getPrefix('ui', 'Injecting AI Coach panel to sidebar'));
        const sidebar = document.querySelector('.analyse__side');
        if (sidebar) {
            sidebar.appendChild(aiCoachPanel);
            console.log(getPrefix('success', 'AI Coach panel successfully injected'));
            
            // Setup MutationObserver after the panel is injected
            setupMutationObserver();
        } else {
            console.log(getPrefix('error', 'Could not find sidebar to inject AI Coach panel'));
        }
    }

    /**
     * Extracts all relevant chess data from the page.
     * @returns {object|null} An object with fen, pgn, feedback, and comment, or null if data is missing.
     */
    function extractChessData() {
        console.log(getPrefix('chess', 'Extracting chess data from page'));
        
        const fenInput = document.querySelector('.copyables .pair input.copyable');
        const pgnTextarea = document.querySelector('.copyables .pgn textarea.copyable');
        const commentEl = document.querySelector('.practice-box .comment');

        if (!fenInput || !pgnTextarea) {
            console.log(getPrefix('error', 'Could not find FEN or PGN data on page'));
            alert("AI Helper: Could not find FEN or PGN data on the page.");
            return null;
        }

        console.log(getPrefix('data', 'Found FEN and PGN data'));
        
        let feedback = 'N/A';
        let commentText = 'N/A';

        if (commentEl) {
            console.log(getPrefix('data', 'Found comment element, extracting feedback'));
            const verdictEl = commentEl.querySelector('.verdict');
            if (verdictEl) {
                feedback = verdictEl.textContent.trim();
                console.log(getPrefix('data', `Extracted feedback: ${feedback}`));
                // To get only the suggestion text, we clone the element and remove the verdict part.
                const commentClone = commentEl.cloneNode(true);
                commentClone.querySelector('.verdict').remove();
                commentText = commentClone.textContent.trim();
                console.log(getPrefix('data', `Extracted comment: ${commentText.substring(0, 50)}...`));
            }
        } else {
            console.log(getPrefix('warning', 'No comment element found'));
        }

        const extractedData = {
            fen: fenInput.value,
            pgn: pgnTextarea.value,
            feedback,
            comment: commentText,
        };
        
        console.log(getPrefix('success', 'Chess data extraction completed'));
        return extractedData;
    }

    /**
     * Constructs a detailed, beginner-focused prompt for the AI.
     * @param {object} data - The extracted chess data.
     * @returns {string} The formatted prompt.
     */
    function buildPrompt(data) {
        console.log(getPrefix('data', 'Building AI prompt'));
        
        const isGoodMove = data.feedback === 'Good move';
        console.log(getPrefix('data', `Move evaluation: ${data.feedback} (isGoodMove: ${isGoodMove})`));
        
        let promptSections = [
            `I am a beginner chess player seeking help. Here is the current game state:`,
            ``,
            `**FEN:** ${data.fen}`,
            `**PGN:** ${data.pgn}`,
            ``,
            `**My Last Move's Analysis:**`,
            `**Feedback:** ${data.feedback}`,
            `**Stockfish Comment:** ${data.comment}`,
            ``,
            `Please explain in simple, easy-to-understand terms for a beginner:`
        ];

        if (isGoodMove) {
            console.log(getPrefix('data', 'Building prompt for good move scenario'));
            // Handle "Good Move" evaluation specially
            promptSections.push(`1. Why was my last move considered a "Good move"? What made it a solid choice?`);
            
            if (data.comment && data.comment.includes('Another was ')) {
                console.log(getPrefix('data', 'Found alternative move suggestion'));
                // There's an alternative move suggestion
                const alternativeMove = data.comment.replace('Good move. Another was ', '').replace('Another was ', '');
                promptSections.push(`2. The analysis mentions "Another was ${alternativeMove}". Why is this alternative move also good? What are the differences between my move and this alternative?`);
            } else {
                console.log(getPrefix('data', 'No alternative move found, using general principles'));
                // No alternative move mentioned
                promptSections.push(`2. What key principles or ideas did my move follow that made it effective?`);
            }
            
            promptSections.push(`3. Based on the current position, what is a simple, general plan or strategy I should be trying to follow over the next few moves?`);
        } else {
            console.log(getPrefix('data', 'Building prompt for non-good move scenario'));
            // Handle other move evaluations (mistakes, blunders, etc.)
            promptSections.push(`1. Why was my last move considered a "${data.feedback}"? What tactical or positional weaknesses did it create?`);
            
            if (data.comment && (data.comment.includes('Best was ') || data.comment.includes('Better was '))) {
                console.log(getPrefix('data', 'Found suggested better move'));
                const suggestedMove = data.comment.replace('Best was ', '').replace('Better was ', '');
                promptSections.push(`2. Why is the suggested move "${suggestedMove}" considered better? What is the idea or plan behind it?`);
            } else {
                console.log(getPrefix('data', 'No specific better move found, using general approach'));
                promptSections.push(`2. What would have been a better approach in this position?`);
            }
            
            promptSections.push(`3. Based on the current position, what is a simple, general plan or strategy I should be trying to follow over the next few moves?`);
        }

        promptSections.push(``, `Focus on fundamental concepts and avoid overly complex variations.`);

        const finalPrompt = promptSections.join('\n').trim();
        console.log(getPrefix('success', `Prompt built successfully (${finalPrompt.length} characters)`));
        return finalPrompt;
    }

    /**
     * Fetches the AI response from the API.
     * @param {string} prompt - The prompt to send to the AI.
     */
    async function fetchAIResponse(prompt) {
        console.log(getPrefix('api', 'Starting AI response fetch'));
        
        const responseContainer = document.getElementById('ai-coach-content');
        console.log(getPrefix('ui', 'Showing loading spinner'));
        responseContainer.innerHTML = '<div class="ai-loader"><div class="spinner"></div></div>'; // Show loader

        const encodedPrompt = encodeURIComponent(prompt);
        const baseEndpoint = 'https://api.zpi.my.id/v1/ai/copilot';
        const fullUrl = `${baseEndpoint}?text=${encodedPrompt}`;
        const proxiedUrl = `https://cors.fadel.web.id/${fullUrl}`;
        
        console.log(getPrefix('api', `Making request to: ${proxiedUrl.substring(0, 100)}...`));

        GM_xmlhttpRequest({
            method: "GET",
            url: proxiedUrl,
            onload: function(response) {
                console.log(getPrefix('api', `Response received with status: ${response.status}`));
                
                if (response.status >= 200 && response.status < 300) {
                    console.log(getPrefix('success', 'API request successful, parsing response'));
                    try {
                        const data = JSON.parse(response.responseText);
                        console.log(getPrefix('data', `API response code: ${data.code}`));
                        
                        if (data.code === 200 && data.response && data.response.content) {
                            console.log(getPrefix('data', `Content length: ${data.response.content.length} characters`));
                            console.log(getPrefix('ui', 'Converting markdown to HTML and displaying'));
                            
                            // Basic markdown to HTML conversion
                            let htmlContent = data.response.content
                                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold
                                .replace(/\n/g, '<br>'); // Newlines
                            responseContainer.innerHTML = `${htmlContent}`;
                            
                            console.log(getPrefix('success', 'AI response successfully displayed'));
                        } else {
                            console.log(getPrefix('error', 'Unexpected API response format'));
                            throw new Error('Unexpected API response format');
                        }
                    } catch (error) {
                        console.log(getPrefix('error', `Error parsing response: ${error.message}`));
                        responseContainer.innerHTML = `<div class="ai-error">Error parsing AI response: ${error.message}</div>`;
                    }
                } else {
                    console.log(getPrefix('error', `API request failed with status: ${response.status}`));
                    responseContainer.innerHTML = `<div class="ai-error">Error fetching AI response. Status: ${response.status}</div>`;
                }
            },
            onerror: function(error) {
                console.log(getPrefix('error', `Network error: ${error.statusText || 'Unknown error'}`));
                responseContainer.innerHTML = `<div class="ai-error">An error occurred: ${error.statusText || 'Network error'}</div>`;
            }
        });
    }

    /**
     * Main handler function to trigger the AI help process.
     */
    function handleAskAI() {
        console.log(getPrefix('event', 'Ask AI button clicked or spacebar pressed'));
        
        const chessData = extractChessData();
        if (!chessData) {
            console.log(getPrefix('error', 'Chess data extraction failed, aborting'));
            return;
        }

        // Ensure the AI Coach panel is expanded
        console.log(getPrefix('ui', 'Ensuring AI Coach panel is expanded'));
        const aiCoachField = document.getElementById('ai-coach-field');
        if (aiCoachField && !aiCoachField.classList.contains('toggle-box--expanded')) {
            console.log(getPrefix('ui', 'Expanding AI Coach panel'));
            aiCoachField.querySelector('legend').click();
        } else {
            console.log(getPrefix('info', 'AI Coach panel already expanded'));
        }

        const prompt = buildPrompt(chessData);
        fetchAIResponse(prompt);
    }

    // --- INITIALIZATION ---
    window.addEventListener('load', () => {
        console.log(getPrefix('init', 'Window loaded, starting initialization'));
        
        // Wait a bit for the dynamic page content to be fully loaded
        console.log(getPrefix('init', 'Waiting 500ms for dynamic content to load'));
        setTimeout(() => {
            console.log(getPrefix('init', 'Setting up UI after delay'));
            setupUI();
        }, 500);

        // Add spacebar shortcut
        console.log(getPrefix('event', 'Setting up spacebar keyboard shortcut'));
        document.addEventListener('keydown', (event) => {
            const activeEl = document.activeElement;
            const isTyping = activeEl && (activeEl.tagName === 'INPUT' || activeEl.tagName === 'TEXTAREA' || activeEl.isContentEditable);

            if (event.code === 'Space' && !isTyping) {
                console.log(getPrefix('event', 'Spacebar shortcut triggered'));
                event.preventDefault(); // Prevent default spacebar action (e.g., scrolling)
                handleAskAI();
            }
        });
        
        console.log(getPrefix('success', 'Lichess AI Assistant initialization completed'));
    });

    // Cleanup when page unloads
    window.addEventListener('beforeunload', () => {
        console.log(getPrefix('init', 'Cleaning up before page unload'));
        if (mutationObserver) {
            mutationObserver.disconnect();
            console.log(getPrefix('success', 'MutationObserver disconnected'));
        }
    });

})();
