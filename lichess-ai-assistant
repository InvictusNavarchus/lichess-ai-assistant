// ==UserScript==
// @name         Lichess AI Assistant
// @namespace    http://tampermonkey.net/
// @version      0.1.0
// @description  AI-powered assistant that explain stockfish's evaluation and suggestions in simple terms. 
// @author       Invictus Navarchus
// @match        https://lichess.org/analysis*
// @grant        GM_addStyle
// @grant        GM_xmlhttpRequest
// ==/UserScript==

(function() {
    'use strict';

    // --- STYLES ---
    // Injects all the necessary CSS for the button and sidebar panel into the page.
    GM_addStyle(`
        :root {
            --ai-helper-blue: #007bff;
            --ai-helper-blue-dark: #0056b3;
            --ai-helper-gray: #f0f0f0;
            --ai-helper-white: #ffffff;
            --ai-helper-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .ai-helper-button {
            background: linear-gradient(145deg, var(--ai-helper-blue), var(--ai-helper-blue-dark));
            color: var(--ai-helper-white);
            border: none;
            padding: 0 15px;
            height: 36px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            margin-left: 10px;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
        }

        .ai-helper-button:hover {
            transform: translateY(-2px);
            box-shadow: var(--ai-helper-shadow);
        }

        .ai-helper-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
        }

        /* AI Coach sidebar panel - styled to match WikiBook */
        #ai-coach-field {
            margin-top: 1rem;
        }

        .ai-coach-content {
            padding: 15px;
            line-height: 1.6;
            font-size: 14px;
        }

        .ai-coach-content h3 {
            margin: 0 0 10px 0;
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }

        .ai-coach-content p {
            margin: 0 0 12px 0;
        }

        .ai-coach-content strong {
            font-weight: 600;
        }

        /* Loading Spinner */
        .ai-loader {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .ai-loader .spinner {
            width: 30px;
            height: 30px;
            border: 3px solid #f3f3f3;
            border-bottom-color: var(--ai-helper-blue);
            border-radius: 50%;
            animation: rotation 1s linear infinite;
        }

        @keyframes rotation {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .ai-error {
            color: #d32f2f;
            padding: 15px;
            font-size: 14px;
        }
    `);

    // --- UI ELEMENTS ---
    let aiButton;
    let aiCoachPanel;

    /**
     * Creates and injects the "Ask AI" button and the AI Coach sidebar panel into the DOM.
     */
    function setupUI() {
        // Create the "Ask AI" button
        aiButton = document.createElement('button');
        aiButton.className = 'ai-helper-button';
        aiButton.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M6 12.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5M4.5 9.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5m2-3a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5m-2-3a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5"/>
                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z"/>
            </svg>
            <span>Ask AI for Help</span>
        `;
        aiButton.onclick = handleAskAI;

        // Create the AI Coach sidebar panel (similar to WikiBook)
        aiCoachPanel = document.createElement('fieldset');
        aiCoachPanel.className = 'analyse__wiki toggle-box toggle-box--toggle toggle-box--ready';
        aiCoachPanel.id = 'ai-coach-field';
        aiCoachPanel.innerHTML = `
            <legend tabindex="0">AI Chess Coach</legend>
            <div class="ai-coach-content" id="ai-coach-content">
                <p>Click "Ask AI for Help" to get personalized analysis and guidance for your current position.</p>
            </div>
        `;

        // Append button to controls
        const controlsContainer = document.querySelector('.analyse__controls .features');
        if (controlsContainer) {
            controlsContainer.appendChild(aiButton);
        } else {
            console.error("AI Helper: Could not find controls container to inject button.");
        }

        // Append AI Coach panel to sidebar (after WikiBook)
        const sidebar = document.querySelector('.analyse__side');
        if (sidebar) {
            sidebar.appendChild(aiCoachPanel);
        } else {
            console.error("AI Helper: Could not find sidebar to inject AI Coach panel.");
        }
    }

    /**
     * Extracts all relevant chess data from the page.
     * @returns {object|null} An object with fen, pgn, feedback, and comment, or null if data is missing.
     */
    function extractChessData() {
        const fenInput = document.querySelector('.copyables .pair input.copyable');
        const pgnTextarea = document.querySelector('.copyables .pgn textarea.copyable');
        const commentEl = document.querySelector('.practice-box .comment');

        if (!fenInput || !pgnTextarea) {
            alert("AI Helper: Could not find FEN or PGN data on the page.");
            return null;
        }

        let feedback = 'N/A';
        let commentText = 'N/A';

        if (commentEl) {
            const verdictEl = commentEl.querySelector('.verdict');
            if (verdictEl) {
                feedback = verdictEl.textContent.trim();
                // To get only the suggestion text, we clone the element and remove the verdict part.
                const commentClone = commentEl.cloneNode(true);
                commentClone.querySelector('.verdict').remove();
                commentText = commentClone.textContent.trim();
            }
        }

        return {
            fen: fenInput.value,
            pgn: pgnTextarea.value,
            feedback,
            comment: commentText,
        };
    }

    /**
     * Constructs a detailed, beginner-focused prompt for the AI.
     * @param {object} data - The extracted chess data.
     * @returns {string} The formatted prompt.
     */
    function buildPrompt(data) {
        const isGoodMove = data.feedback === 'Good move';
        
        let promptSections = [
            `I am a beginner chess player seeking help. Here is the current game state:`,
            ``,
            `**FEN:** ${data.fen}`,
            `**PGN:** ${data.pgn}`,
            ``,
            `**My Last Move's Analysis:**`,
            `**Feedback:** ${data.feedback}`,
            `**Stockfish Comment:** ${data.comment}`,
            ``,
            `Please explain in simple, easy-to-understand terms for a beginner:`
        ];

        if (isGoodMove) {
            // Handle "Good Move" evaluation specially
            promptSections.push(`1. Why was my last move considered a "Good move"? What made it a solid choice?`);
            
            if (data.comment && data.comment.includes('Another was ')) {
                // There's an alternative move suggestion
                const alternativeMove = data.comment.replace('Good move. Another was ', '').replace('Another was ', '');
                promptSections.push(`2. The analysis mentions "Another was ${alternativeMove}". Why is this alternative move also good? What are the differences between my move and this alternative?`);
            } else {
                // No alternative move mentioned
                promptSections.push(`2. What key principles or ideas did my move follow that made it effective?`);
            }
            
            promptSections.push(`3. Based on the current position, what is a simple, general plan or strategy I should be trying to follow over the next few moves?`);
        } else {
            // Handle other move evaluations (mistakes, blunders, etc.)
            promptSections.push(`1. Why was my last move considered a "${data.feedback}"? What tactical or positional weaknesses did it create?`);
            
            if (data.comment && (data.comment.includes('Best was ') || data.comment.includes('Better was '))) {
                const suggestedMove = data.comment.replace('Best was ', '').replace('Better was ', '');
                promptSections.push(`2. Why is the suggested move "${suggestedMove}" considered better? What is the idea or plan behind it?`);
            } else {
                promptSections.push(`2. What would have been a better approach in this position?`);
            }
            
            promptSections.push(`3. Based on the current position, what is a simple, general plan or strategy I should be trying to follow over the next few moves?`);
        }

        promptSections.push(``, `Focus on fundamental concepts and avoid overly complex variations.`);

        return promptSections.join('\n').trim();
    }

    /**
     * Fetches the AI response from the API.
     * @param {string} prompt - The prompt to send to the AI.
     */
    async function fetchAIResponse(prompt) {
        const responseContainer = document.getElementById('ai-coach-content');
        responseContainer.innerHTML = '<div class="ai-loader"><div class="spinner"></div></div>'; // Show loader

        const encodedPrompt = encodeURIComponent(prompt);
        const baseEndpoint = 'https://api.zpi.my.id/v1/ai/copilot';
        const fullUrl = `${baseEndpoint}?text=${encodedPrompt}`;
        const proxiedUrl = `https://cors.fadel.web.id/${fullUrl}`;

        GM_xmlhttpRequest({
            method: "GET",
            url: proxiedUrl,
            onload: function(response) {
                if (response.status >= 200 && response.status < 300) {
                    try {
                        const data = JSON.parse(response.responseText);
                        if (data.code === 200 && data.response && data.response.content) {
                            // Basic markdown to HTML conversion
                            let htmlContent = data.response.content
                                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold
                                .replace(/\n/g, '<br>'); // Newlines
                            responseContainer.innerHTML = `${htmlContent}`;
                        } else {
                            throw new Error('Unexpected API response format');
                        }
                    } catch (error) {
                         responseContainer.innerHTML = `<div class="ai-error">Error parsing AI response: ${error.message}</div>`;
                    }
                } else {
                    responseContainer.innerHTML = `<div class="ai-error">Error fetching AI response. Status: ${response.status}</div>`;
                }
            },
            onerror: function(error) {
                 responseContainer.innerHTML = `<div class="ai-error">An error occurred: ${error.statusText || 'Network error'}</div>`;
            }
        });
    }

    /**
     * Main handler function to trigger the AI help process.
     */
    function handleAskAI() {
        const chessData = extractChessData();
        if (!chessData) return;

        // Ensure the AI Coach panel is expanded
        const aiCoachField = document.getElementById('ai-coach-field');
        if (aiCoachField && !aiCoachField.classList.contains('toggle-box--expanded')) {
            aiCoachField.querySelector('legend').click();
        }

        const prompt = buildPrompt(chessData);
        fetchAIResponse(prompt);
    }

    // --- INITIALIZATION ---
    window.addEventListener('load', () => {
        // Wait a bit for the dynamic page content to be fully loaded
        setTimeout(setupUI, 500);

        // Add spacebar shortcut
        document.addEventListener('keydown', (event) => {
            const activeEl = document.activeElement;
            const isTyping = activeEl && (activeEl.tagName === 'INPUT' || activeEl.tagName === 'TEXTAREA' || activeEl.isContentEditable);

            if (event.code === 'Space' && !isTyping) {
                event.preventDefault(); // Prevent default spacebar action (e.g., scrolling)
                handleAskAI();
            }
        });
    });

})();
